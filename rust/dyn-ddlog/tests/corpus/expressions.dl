// args: build -Z dump-ast
// expected stdout:
// [
//     Declaration {
//         attributes: [],
//         kind: Function(
//             Function {
//                 name: [
//                     Ident("foo"),
//                 ],
//                 args: [
//                     (
//                         Ident("x"),
//                         BitVec(
//                             32,
//                         ),
//                     ),
//                     (
//                         Ident("y"),
//                         BitVec(
//                             32,
//                         ),
//                     ),
//                 ],
//                 ret: Unit,
//                 body: Expr {
//                     kind: Block(Block {
//                         exprs: [
//                             Expr {
//                                 kind: If(
//                                     Expr {
//                                         kind: Cmp(
//                                             Expr {
//                                                 kind: Ident("x"),
//                                             },
//                                             GreaterEq,
//                                             Expr {
//                                                 kind: Int(6),
//                                             },
//                                         ),
//                                     },
//                                     Expr {
//                                         kind: Block(Block {
//                                             exprs: [
//                                                 Expr {
//                                                     kind: BinOp(
//                                                         Expr {
//                                                             kind: Ident("x"),
//                                                         },
//                                                         Add,
//                                                         Expr {
//                                                             kind: Nested(Expr {
//                                                                 kind: BinOp(
//                                                                     Expr {
//                                                                         kind: Int(6),
//                                                                     },
//                                                                     Div,
//                                                                     Expr {
//                                                                         kind: Nested(Expr {
//                                                                             kind: Not(Expr {
//                                                                                 kind: Nested(Expr {
//                                                                                     kind: BinOp(
//                                                                                         Expr {
//                                                                                             kind: Int(100),
//                                                                                         },
//                                                                                         BitAnd,
//                                                                                         Expr {
//                                                                                             kind: Int(7),
//                                                                                         },
//                                                                                     ),
//                                                                                 }),
//                                                                             }),
//                                                                         }),
//                                                                     },
//                                                                 ),
//                                                             }),
//                                                         },
//                                                     ),
//                                                 },
//                                             ],
//                                             semicolon_terminated: false,
//                                         }),
//                                     },
//                                     Expr {
//                                         kind: Block(Block {
//                                             exprs: [
//                                                 Expr {
//                                                     kind: Return(Some(
//                                                         Expr {
//                                                             kind: Int(5),
//                                                         },
//                                                     )),
//                                                 },
//                                                 Expr {
//                                                     kind: Break(Some(
//                                                         Expr {
//                                                             kind: Int(1000),
//                                                         },
//                                                     )),
//                                                 },
//                                                 Expr {
//                                                     kind: Continue(Some(
//                                                         Expr {
//                                                             kind: Cmp(
//                                                                 Expr {
//                                                                     kind: Ident("x"),
//                                                                 },
//                                                                 Eq,
//                                                                 Expr {
//                                                                     kind: Nested(Expr {
//                                                                         kind: Ident("y"),
//                                                                     }),
//                                                                 },
//                                                             ),
//                                                         },
//                                                     )),
//                                                 },
//                                             ],
//                                             semicolon_terminated: false,
//                                         }),
//                                     },
//                                 ),
//                             },
//                         ],
//                         semicolon_terminated: false,
//                     }),
//                 },
//             },
//         ),
//     },
// ]

function foo(x: bit<32>, y: bit<32>) {
    if (x >= 6) {
        x + (6 / (not (100 & 7)))
    } else {
        return 5;
        break 1000;
        continue {
            x == (((y)))
        }
    }
}
